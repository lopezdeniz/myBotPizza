import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.utils import executor

TOKEN = '6993661980:AAE9Cy-BNrTL3AsAyuHxL5oKuus-aJcMyc8'

# Owner ID
OWNER_ID = 732748499

bot = Bot(TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_stats.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_stats (
            user_id INTEGER PRIMARY KEY,
            visits INTEGER NOT NULL DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_stats(user_id):
    conn = sqlite3.connect('bot_stats.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO user_stats (user_id) VALUES (?)', (user_id,))
    cursor.execute('UPDATE user_stats SET visits = visits + 1 WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def get_stats():
    conn = sqlite3.connect('bot_stats.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM user_stats')
    total_users = cursor.fetchone()[0]
    cursor.execute('SELECT SUM(visits) FROM user_stats')
    total_visits = cursor.fetchone()[0]
    conn.close()
    return total_users, total_visits

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def get_users():
    conn = sqlite3.connect('bot_stats.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM user_stats')
    users = cursor.fetchall()
    conn.close()
    return users

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    update_user_stats(message.from_user.id)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    button_open_site = KeyboardButton(text='üçî –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É üçî', web_app=WebAppInfo(url='https://lopezdeniz.github.io/my-cart/'))
    button_feedback = KeyboardButton(text='‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚úâÔ∏è')
    markup.add(button_open_site)
    markup.add(button_feedback)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –∏–ª–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.", reply_markup=markup)

@dp.message_handler(lambda message: '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å' in message.text)
async def handle_feedback(message: types.Message):
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –ª–∏–±–æ username.
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å–æ –º–Ω–æ–π: https://t.me/LopezDeniz")

@dp.message_handler(commands=['users'])
async def users_list(message: types.Message):
    if message.from_user.id == OWNER_ID:
        users = await get_users()
        if users:
            users_info = "\n".join([str(user[0]) for user in users])
            await message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:\n{users_info}")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')

@dp.message_handler(commands=['stats'])
async def stats(message: types.Message):
    if message.from_user.id == OWNER_ID:
        total_users, total_visits = await get_stats()
        stats_message = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n"
            f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {total_users}\n"
            f"üî¢ <b>–í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π:</b> {total_visits}"
        )
        await message.answer(stats_message, parse_mode=types.ParseMode.HTML)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')

if __name__ == '__main__':
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    executor.start_polling(dp, skip_updates=True)

