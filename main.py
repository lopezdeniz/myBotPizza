import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils import executor
from datetime import date

TOKEN = '6993661980:AAE9Cy-BNrTL3AsAyuHxL5oKuus-aJcMyc8'

# Owner ID
OWNER_ID = 732748499

bot = Bot(TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_stats.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_stats (
            user_id INTEGER PRIMARY KEY,
            visits INTEGER NOT NULL DEFAULT 0,
            last_visit TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS daily_stats (
            date TEXT PRIMARY KEY,
            visits INTEGER NOT NULL DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def update_db_structure():
    conn = sqlite3.connect('bot_stats.db')
    cursor = conn.cursor()
    cursor.execute('PRAGMA table_info(user_stats)')
    columns = [col[1] for col in cursor.fetchall()]
    if 'last_visit' not in columns:
        cursor.execute('ALTER TABLE user_stats ADD COLUMN last_visit TEXT')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_stats(user_id):
    conn = sqlite3.connect('bot_stats.db')
    cursor = conn.cursor()
    today = date.today().isoformat()

    cursor.execute('INSERT OR IGNORE INTO user_stats (user_id, last_visit) VALUES (?, ?)', (user_id, today))
    cursor.execute('UPDATE user_stats SET visits = visits + 1, last_visit = ? WHERE user_id = ?', (today, user_id))

    cursor.execute('INSERT OR IGNORE INTO daily_stats (date) VALUES (?)', (today,))
    cursor.execute('UPDATE daily_stats SET visits = visits + 1 WHERE date = ?', (today,))
    
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def get_total_stats():
    conn = sqlite3.connect('bot_stats.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM user_stats')
    total_users = cursor.fetchone()[0]
    cursor.execute('SELECT SUM(visits) FROM user_stats')
    total_visits = cursor.fetchone()[0]
    conn.close()
    return total_users, total_visits

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
async def get_today_stats():
    conn = sqlite3.connect('bot_stats.db')
    cursor = conn.cursor()
    today = date.today().isoformat()
    cursor.execute('SELECT visits FROM daily_stats WHERE date = ?', (today,))
    today_visits = cursor.fetchone()
    conn.close()
    return today_visits[0] if today_visits else 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def get_users():
    conn = sqlite3.connect('bot_stats.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM user_stats')
    users = cursor.fetchall()
    conn.close()
    return users

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    update_user_stats(message.from_user.id)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    button_open_site = KeyboardButton(text='üçî –°–¥–µ–ª–∞—Ç—å –ó–∞–∫–∞–∑ üçî', web_app=WebAppInfo(url='https://lopezdeniz.github.io/mycart2'))
    button_feedback = KeyboardButton(text='‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚úâÔ∏è')
    markup.add(button_open_site)
    markup.add(button_feedback)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    inline_markup = InlineKeyboardMarkup()
    inline_button = InlineKeyboardButton(text="üçî –°–¥–µ–ª–∞—Ç—å –ó–∞–∫–∞–∑ üçî", web_app=WebAppInfo(url="https://lopezdeniz.github.io/mycart2"))
    inline_markup.add(inline_button)

    sent_message = await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –∏–ª–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.", reply_markup=markup)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    pinned_message = await message.answer("–ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π:", reply_markup=inline_markup)
    await bot.pin_chat_message(chat_id=message.chat.id, message_id=pinned_message.message_id)

@dp.message_handler(lambda message: '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å' in message.text)
async def handle_feedback(message: types.Message):
    update_user_stats(message.from_user.id)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å–æ –º–Ω–æ–π: https://t.me/LopezDeniz")

@dp.message_handler(commands=['users'])
async def users_list(message: types.Message):
    if message.from_user.id == OWNER_ID:
        users = await get_users()
        if users:
            users_info = "\n".join([str(user[0]) for user in users])
            await message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:\n{users_info}")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')

@dp.message_handler(commands=['stats'])
async def stats(message: types.Message):
    if message.from_user.id == OWNER_ID:
        total_users, total_visits = await get_total_stats()
        today_visits = await get_today_stats()
        stats_message = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n"
            f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {total_users}\n"
            f"üî¢ <b>–í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π:</b> {total_visits}\n"
            f"üìÖ <b>–ü–æ—Å–µ—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è:</b> {today_visits}"
        )
        await message.answer(stats_message, parse_mode=types.ParseMode.HTML)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')

@dp.message_handler(commands=['commands'])
async def list_commands(message: types.Message):
    if message.from_user.id == OWNER_ID:
        commands_message = (
            "üìù <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/commands - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"
        )
        await message.answer(commands_message, parse_mode=types.ParseMode.HTML)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')

if __name__ == '__main__':
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    update_db_structure()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    executor.start_polling(dp, skip_updates=True)
